//
// Created by Camiel Verdult on 12/6/2021.
//

// This example code is from: https://en.cppreference.com/w/cpp/numeric/random

#include <iostream>
#include <random>

int main()
{

    long long seed = 0;

    while(true){

        /*
         * w 	- 	the power of two that determines the range of values generated by the engine
         * n 	- 	the degree of recurrence
         * m 	- 	the middle word, an offset used in the recurrence relation defining the series x, 1 ≤ m < n
         * r 	- 	the number of bits of the lower bit-mask, 0 ≤ r ≤ w - 1, also known as the twist value
         * a 	- 	the conditional xor-mask, i.e. the coefficients of the rational normal form twist matrix
         * u 	- 	1st component of the bit-scrambling (tempering) matrix
         * d 	- 	2nd component of the bit-scrambling (tempering) matrix
         * s 	- 	3rd component of the bit-scrambling (tempering) matrix
         * b 	- 	4th component of the bit-scrambling (tempering) matrix
         * t 	- 	5th component of the bit-scrambling (tempering) matrix
         * c 	- 	6th component of the bit-scrambling (tempering) matrix
         * l 	- 	7th component of the bit-scrambling (tempering) matrix
         * f 	- 	the initialization multiplier
         *
         * We use the values from mt19937_64, see https://en.cppreference.com/w/cpp/numeric/random/mersenne_twister_engine
         */


        std::mersenne_twister_engine<std::uint_fast64_t, 64, 312, 156, 31,
                0xb5026f5aa96619e9, 29,
                0x5555555555555555, 17,
                0x71d67fffeda60000, 37,
                0xfff7eee000000000, 43, 6364136223846793005> mtw;

        std::cout << "Enter a number to use as seed \n\t- enter '0' to use auto-generate seed\n\t- enter '-1' to exit program: ";
        std::cin >> seed;
        std::cout << std::endl;

        if(seed == -1){
            std::cout << "Quitting program." << std::endl;
            return 0;
        }
        else if(seed == 0){
            seed = (int)time(nullptr);
        }

        std::cout << "Using seed: " << seed << std::endl;

        mtw.seed(seed);

        // roll 6-sided dice 10 times
        for (int n = 0; n < 10; ++n) {
            unsigned int x = 7;
            while(x > 6) {
                // Mersenne twister generates ridiculously big numbers, so we scale back to <1, 6> by dividing through 2^64
                x = 1 + mtw() / (pow(2, 64) / 6);
                std::cout << x << ' ';
            }
        }

        std::cout << std::endl;
    }
}